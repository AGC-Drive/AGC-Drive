name: cross_view_transformer_v2vnet
root_dir: '/data/datasets/AGC-Drive/train'
validate_dir: '/data/datasets/AGC-Drive/test'

yaml_parser: "load_point_pillar_params"

train_params:
  batch_size: &batch_size 6
  epoches: &epoches 20
  eval_freq: 5
  save_freq: 1
  max_cav: &max_cav 5
  visible: true

fusion:
  core_method: 'CamIntermediateFusionDataset' # LateFusionDataset, EarlyFusionDataset, IntermediateFusionDataset supported
  args:
    proj_first: true
    cur_ego_pose_flag : true
    uav_flag : false
    only_uav_flag : false
    rebuttal_flag : false

data_augment: []
# add_data_extension: ['bev_dynamic.png', 'bev_static.png', 'bev_lane.png', 'bev_visibility.png', 'bev_visibility_corp.png']

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'RgbPreprocessor'
  args:
    bgr2rgb: true
    resize_x: &image_width 512
    resize_y: &image_height 512
    mean: [0.485, 0.456, 0.406]
    std: [0.229, 0.224, 0.225]
    voxel_size: &voxel_size [0.4, 0.4, 4]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # object evaluation range
  cav_lidar_range: &cav_lidar [-50, -50, -3, 50, 50, 1]


# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: [0, 90, 180, 270]
    feature_stride: 4
    num: &achor_num 4
  target_args:
    pos_threshold: 0.30
    neg_threshold: 0.10
    score_threshold: 0.20
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15

model:
  core_method: cross_view_transformer_v2vnet
  args:
    max_cav: *max_cav
    target: &target 'dynamic' # dynamic, static or both
    anchor_number: *achor_num
    encoder:
      num_layers: 34
      pretrained: true
      image_width: *image_width
      image_height: *image_height
      id_pick: [1, 3]
    point_pillar_scatter:
      num_features: 64

    decoder:
      input_dim: 128
      num_layer: 3
      num_ch_dec: &decoder_block [32, 64, 128]

    sttf: &sttf
      resolution: 0.390625 # m/pixel
      downsample_rate: 8
      use_roi_mask: true

    v2vnet_fusion:
      resolution: 0.390625 # m/pixel
      downsample_rate: 8
      num_iteration: 3
      in_channels: 128
      gru_flag: true
      agg_operator: "avg" # max or avg
      conv_gru:
        H: 32
        W: 32
        num_layers: 1
        kernel_size: [[3,3]]
    cvm:
      dim: 128 # b, d, h w from resenet -> b 256 h w
      middle: [2, 2] # middle conv
      bev_embedding:
        sigma: 1.0
        bev_height: 256
        bev_width: 256
        h_meters: 100
        w_meters: 100
        offset: 0.0
        decoder_blocks: *decoder_block

      cross_view: #cross_view attention
        image_height: *image_height
        image_width: *image_width
        no_image_features: False
        skip: True
        heads: 4
        dim_head: 32
        qkv_bias: True

    seg_head_dim: 32
    output_class: 2

loss:
  core_method: point_pillar_camera_loss
  args:
    cls_weight: 3.0
    reg: 2.0

optimizer:
  core_method: AdamW
  lr: 2e-4
  args:
    eps: 1e-10
    weight_decay: 1e-2

lr_scheduler:
    core_method: cosineannealwarm #step, multistep, Exponential and cosineannealwarm support
    epoches: *epoches
    warmup_lr: 2e-5
    warmup_epoches: 10
    lr_min: 5e-6
